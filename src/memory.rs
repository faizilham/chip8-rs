use std::ptr;

pub const MEM_SIZE : usize = 4096;
pub const PROGRAM_START : usize = 0x200;

pub type Memory = [u8; MEM_SIZE];

const DIGIT_SPRITE_SIZE : usize = 80;
const DIGIT_SPRITE : [u8; DIGIT_SPRITE_SIZE] = [0xF0, 0x90, 0x90, 0x90, 0xF0, 0x20, 0x60, 0x20, 0x20, 0x70, 0xF0, 0x10, 0xF0, 0x80, 0xF0, 0xF0, 0x10, 0xF0, 0x10, 0xF0, 0x90, 0x90, 0xF0, 0x10, 0x10, 0xF0, 0x80, 0xF0, 0x10, 0xF0, 0xF0, 0x80, 0xF0, 0x90, 0xF0, 0xF0, 0x10, 0x20, 0x40, 0x40, 0xF0, 0x90, 0xF0, 0x90, 0xF0, 0xF0, 0x90, 0xF0, 0x10, 0xF0, 0xF0, 0x90, 0xF0, 0x90, 0x90, 0xE0, 0x90, 0xE0, 0x90, 0xE0, 0xF0, 0x80, 0x80, 0x80, 0xF0, 0xE0, 0x90, 0x90, 0x90, 0xE0, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0xF0, 0x80, 0xF0, 0x80, 0x80];

pub fn allocate_memory() -> Memory {
    let mut mem = [0; MEM_SIZE];

    // initialized digit sprite
    unsafe {
        ptr::copy(DIGIT_SPRITE.as_ptr(), mem.as_mut_ptr(), DIGIT_SPRITE_SIZE);
    }

    mem
}

#[cfg(test)]
mod test {
    use wasm_bindgen_test::*;
    use crate::memory::*;

    #[wasm_bindgen_test]
    fn test_allocate() {
        let mem = allocate_memory();

        for i in 0..DIGIT_SPRITE_SIZE {
            assert_eq!(mem[i], DIGIT_SPRITE[i]);
        }
    }
}
